// Code generated by go-swagger; DO NOT EDIT.

package elephpants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutElephpantHandlerFunc turns a function with the right signature into a put elephpant handler
type PutElephpantHandlerFunc func(PutElephpantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutElephpantHandlerFunc) Handle(params PutElephpantParams) middleware.Responder {
	return fn(params)
}

// PutElephpantHandler interface for that can handle valid put elephpant params
type PutElephpantHandler interface {
	Handle(PutElephpantParams) middleware.Responder
}

// NewPutElephpant creates a new http.Handler for the put elephpant operation
func NewPutElephpant(ctx *middleware.Context, handler PutElephpantHandler) *PutElephpant {
	return &PutElephpant{Context: ctx, Handler: handler}
}

/*
	PutElephpant swagger:route PUT /elephpant elephpants putElephpant

Update a elephpant
*/
type PutElephpant struct {
	Context *middleware.Context
	Handler PutElephpantHandler
}

func (o *PutElephpant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutElephpantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutElephpantBody put elephpant body
//
// swagger:model PutElephpantBody
type PutElephpantBody struct {

	// displayname
	// Required: true
	Displayname *string `json:"displayname"`

	// name
	// Required: true
	Name *string `json:"name"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this put elephpant body
func (o *PutElephpantBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutElephpantBody) validateDisplayname(formats strfmt.Registry) error {

	if err := validate.Required("elephpant"+"."+"displayname", "body", o.Displayname); err != nil {
		return err
	}

	return nil
}

func (o *PutElephpantBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("elephpant"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PutElephpantBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("elephpant"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put elephpant body based on context it is used
func (o *PutElephpantBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutElephpantBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutElephpantBody) UnmarshalBinary(b []byte) error {
	var res PutElephpantBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
