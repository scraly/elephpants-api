// Code generated by go-swagger; DO NOT EDIT.

package elephpants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetElephpantImageHandlerFunc turns a function with the right signature into a get elephpant image handler
type GetElephpantImageHandlerFunc func(GetElephpantImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetElephpantImageHandlerFunc) Handle(params GetElephpantImageParams) middleware.Responder {
	return fn(params)
}

// GetElephpantImageHandler interface for that can handle valid get elephpant image params
type GetElephpantImageHandler interface {
	Handle(GetElephpantImageParams) middleware.Responder
}

// NewGetElephpantImage creates a new http.Handler for the get elephpant image operation
func NewGetElephpantImage(ctx *middleware.Context, handler GetElephpantImageHandler) *GetElephpantImage {
	return &GetElephpantImage{Context: ctx, Handler: handler}
}

/*
	GetElephpantImage swagger:route GET /elephpant/image elephpants getElephpantImage

Get a elephpant image by a given name
*/
type GetElephpantImage struct {
	Context *middleware.Context
	Handler GetElephpantImageHandler
}

func (o *GetElephpantImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetElephpantImageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
